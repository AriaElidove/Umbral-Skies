plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.neoforged.gradle' version '[6.0.18,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    // Required for Aether
    id 'io.github.0ffz.github-packages' version '1.+'
}

version = '1.3'
group = 'us.drullk.umbralskies'
archivesBaseName = 'umbral_skies'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'official', version: '1.20.1'

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'umbral_skies'
            property 'mixin.env.disableRefMap', 'true'

            mods {
                umbral_skies {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'umbral_skies'
            property 'mixin.env.disableRefMap', 'true'

            mods {
                umbral_skies {
                    source sourceSets.main
                }
            }
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'umbral_skies'
            property 'mixin.env.disableRefMap', 'true'

            mods {
                umbral_skies {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.disableRefMap', 'true'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'umbral_skies', '--all', '--existing-mod', 'aether', '--existing-mod', 'twilightforest', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                umbral_skies {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
    // flatDir {
    //     dir 'libs'
    // }

    maven { url "https://modmaven.dev/" }
    maven { url 'https://maven.tamaized.com/releases/' }

    maven { url = "https://maven.theillusivec4.top/" }
    maven githubPackage.invoke("The-Aether-Team/The-Aether")
    maven githubPackage.invoke("The-Aether-Team/Nitrogen")
}

dependencies {
    minecraft 'net.neoforged:forge:1.20.1-47.1.77'

    implementation fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}")

    // Find Twilight Forest builds from https://tamaized.com/azure/twilightforest/
    implementation fg.deobf("teamtwilight:twilightforest:${twilight_version}:universal")

    // Aether
    compileOnly "com.aetherteam.aether:aether:${aether_version}"
    runtimeOnly fg.deobf("com.aetherteam.aether:aether:${aether_version}")
    compileOnly fg.deobf("com.aetherteam.nitrogen:nitrogen_internals:${project.nitrogen_version}")
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "umbralskies",
                "Specification-Vendor"    : "drullkus",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "drullkus",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
//jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// Mod now requires to be Java-loaded, for new blocks + items
//tasks.register('lowcode', Jar) {
//    classifier = 'lowcode'
//    archiveName = "${project.name}-${project.version}.jar"
//    from('src/main/resources') { exclude '**/META-INF/mods.toml' }
//    from('src/main/resources/META-INF/mods.toml') {
//        filter { String line ->
//            line.startsWith('#') ? null : line.replace('${file.jarVersion}', "${project.version}").replace('javafml', 'lowcodefml')
//        }
//        into('META-INF')
//    }
//    from('src/generated/resources') { exclude '**/.cache/**' }
//}
